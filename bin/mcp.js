#!/usr/bin/env node\n\nconst { program } = require('commander');\nconst chalk = require('chalk');\nconst MCPClient = require('../lib/client');\nconst auth = require('../lib/auth');\nconst config = require('../lib/config');\n\nconst client = new MCPClient();\n\nprogram\n  .name('mcp')\n  .description('MCP Server Management CLI')\n  .version('1.0.0');\n\n// Authentication commands\nprogram\n  .command('login')\n  .description('Login to MCP server')\n  .action(async () => {\n    try {\n      await auth.login();\n      console.log(chalk.green('‚úÖ Successfully logged in to MCP server'));\n    } catch (error) {\n      console.error(chalk.red('‚ùå Login failed:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('logout')\n  .description('Logout from MCP server')\n  .action(async () => {\n    try {\n      await auth.logout();\n      console.log(chalk.yellow('üëã Logged out from MCP server'));\n    } catch (error) {\n      console.error(chalk.red('‚ùå Logout failed:'), error.message);\n    }\n  });\n\n// Server management commands\nprogram\n  .command('list')\n  .description('List available MCP servers')\n  .action(async () => {\n    try {\n      const servers = await client.listServers();\n      console.log(chalk.blue('üöÄ Available MCP Servers:'));\n      console.log('');\n      \n      if (servers.length === 0) {\n        console.log(chalk.yellow('No servers found'));\n        return;\n      }\n      \n      servers.forEach(server => {\n        const status = server.status === 'running' ? \n          chalk.green('üü¢ RUNNING') : \n          chalk.gray('‚ö™ STOPPED');\n        \n        console.log(`${chalk.cyan(server.id.padEnd(12))} ${server.name.padEnd(30)} ${status}`);\n        console.log(`  ${chalk.gray(server.description)}`);\n        console.log('');\n      });\n    } catch (error) {\n      console.error(chalk.red('‚ùå Failed to list servers:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('install <server>')\n  .description('Install an MCP server')\n  .action(async (serverId) => {\n    try {\n      console.log(chalk.blue(`üì¶ Installing ${serverId}...`));\n      await client.installServer(serverId);\n      console.log(chalk.green(`‚úÖ Successfully installed ${serverId}`));\n    } catch (error) {\n      console.error(chalk.red('‚ùå Installation failed:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('start <server>')\n  .description('Start an MCP server')\n  .action(async (serverId) => {\n    try {\n      console.log(chalk.blue(`üöÄ Starting ${serverId}...`));\n      await client.startServer(serverId);\n      console.log(chalk.green(`‚úÖ Successfully started ${serverId}`));\n    } catch (error) {\n      console.error(chalk.red('‚ùå Start failed:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('stop <server>')\n  .description('Stop an MCP server')\n  .action(async (serverId) => {\n    try {\n      console.log(chalk.blue(`üõë Stopping ${serverId}...`));\n      await client.stopServer(serverId);\n      console.log(chalk.yellow(`‚úÖ Successfully stopped ${serverId}`));\n    } catch (error) {\n      console.error(chalk.red('‚ùå Stop failed:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('restart <server>')\n  .description('Restart an MCP server')\n  .action(async (serverId) => {\n    try {\n      console.log(chalk.blue(`üîÑ Restarting ${serverId}...`));\n      await client.restartServer(serverId);\n      console.log(chalk.green(`‚úÖ Successfully restarted ${serverId}`));\n    } catch (error) {\n      console.error(chalk.red('‚ùå Restart failed:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('status')\n  .description('Show server status')\n  .action(async () => {\n    try {\n      const status = await client.getStatus();\n      console.log(chalk.blue('üìä MCP Server Status'));\n      console.log('');\n      console.log(`Endpoint: ${chalk.cyan(status.endpoint)}`);\n      console.log(`Connected: ${status.connected ? chalk.green('‚úÖ Yes') : chalk.red('‚ùå No')}`);\n      console.log(`Active Servers: ${chalk.yellow(status.activeServers)}`);\n      console.log('');\n    } catch (error) {\n      console.error(chalk.red('‚ùå Failed to get status:'), error.message);\n      process.exit(1);\n    }\n  });\n\n// API Key management\nprogram\n  .command('keys')\n  .description('Manage API keys')\n  .action(async () => {\n    try {\n      const keys = await client.listApiKeys();\n      console.log(chalk.blue('üîë API Keys:'));\n      console.log('');\n      \n      if (keys.length === 0) {\n        console.log(chalk.yellow('No API keys found'));\n        console.log(chalk.gray('Use \"mcp create-key <name>\" to create one'));\n        return;\n      }\n      \n      keys.forEach(key => {\n        const status = key.active ? chalk.green('ACTIVE') : chalk.red('REVOKED');\n        console.log(`${chalk.cyan(key.id)} ${key.name.padEnd(20)} ${status}`);\n        console.log(`  Created: ${chalk.gray(key.created)}`);\n        console.log('');\n      });\n    } catch (error) {\n      console.error(chalk.red('‚ùå Failed to list API keys:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('create-key <name>')\n  .description('Create a new API key')\n  .action(async (name) => {\n    try {\n      console.log(chalk.blue(`üîë Creating API key: ${name}...`));\n      const key = await client.createApiKey(name);\n      console.log(chalk.green('‚úÖ API key created successfully!'));\n      console.log('');\n      console.log(chalk.yellow('‚ö†Ô∏è  Save this key securely - it won\\'t be shown again:'));\n      console.log(chalk.cyan(key.token));\n      console.log('');\n    } catch (error) {\n      console.error(chalk.red('‚ùå Failed to create API key:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('revoke-key <id>')\n  .description('Revoke an API key')\n  .action(async (keyId) => {\n    try {\n      console.log(chalk.blue(`üóëÔ∏è  Revoking API key: ${keyId}...`));\n      await client.revokeApiKey(keyId);\n      console.log(chalk.yellow('‚úÖ API key revoked successfully'));\n    } catch (error) {\n      console.error(chalk.red('‚ùå Failed to revoke API key:'), error.message);\n      process.exit(1);\n    }\n  });\n\n// Use command - connect to MCP server\nprogram\n  .command('use <server> <tool> [args...]')\n  .description('Use an MCP server tool')\n  .action(async (serverId, tool, args) => {\n    try {\n      console.log(chalk.blue(`üîß Using ${serverId}:${tool}...`));\n      const result = await client.useTool(serverId, tool, args);\n      console.log(result);\n    } catch (error) {\n      console.error(chalk.red('‚ùå Tool execution failed:'), error.message);\n      process.exit(1);\n    }\n  });\n\nprogram\n  .command('config')\n  .description('Show configuration')\n  .action(() => {\n    const conf = config.get();\n    console.log(chalk.blue('‚öôÔ∏è  MCP CLI Configuration:'));\n    console.log('');\n    console.log(`Server URL: ${chalk.cyan(conf.serverUrl)}`);\n    console.log(`User: ${conf.user ? chalk.green(conf.user) : chalk.gray('Not logged in')}`);\n    console.log(`Config File: ${chalk.gray(config.getConfigPath())}`);\n    console.log('');\n  });\n\nprogram.parse();